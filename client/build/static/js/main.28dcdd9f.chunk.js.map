{"version":3,"sources":["components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["endpoint","ToDoList","props","onChange","event","setState","target","name","value","onSubmit","task","state","axios","post","headers","then","res","getTask","console","log","get","data","items","map","item","color","status","Card","key","_id","fluid","Content","Header","textAlign","style","wordWrap","Meta","Icon","onClick","updateTask","paddingRight","undoTask","deleteTask","id","put","delete","this","className","as","Form","Input","type","placeholder","Group","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28dcdd9f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\n\nlet endpoint = \"http://localhost:8080\";\n\nclass ToDoList extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            task: \"\",\n            items: []\n        };\n    }\n\n    componentDidMount() {\n        this.getTask();\n    }\n\n    onChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    onSubmit = () => {\n        let { task } = this.state;\n        // console.log(\"pRINTING task\", this.state.task);\n        if (task) {\n            axios\n                .post(\n                    endpoint + \"/api/task\",\n                    {\n                        task\n                    },\n                    {\n                        headers: {\n                            \"Content-Type\": \"application/x-www-form-urlencoded\"\n                        }\n                    }\n                )\n                .then(res => {\n                    this.getTask();\n                    this.setState({\n                        task: \"\"\n                    });\n                    console.log(res);\n                });\n        }\n    };\n\n    getTask = () => {\n        axios.get(endpoint + \"/api/task\").then(res => {\n            console.log(res);\n            if (res.data) {\n                this.setState({\n                    items: res.data.map(item => {\n                        let color = \"yellow\";\n\n                        if (item.status) {\n                            color = \"green\";\n                        }\n                        return (\n                            <Card key={item._id} color={color} fluid>\n                                <Card.Content>\n                                    <Card.Header textAlign=\"left\">\n                                        <div style={{ wordWrap: \"break-word\" }}>{item.task}</div>\n                                    </Card.Header>\n\n                                    <Card.Meta textAlign=\"right\">\n                                        <Icon\n                                            name=\"check circle\"\n                                            color=\"green\"\n                                            onClick={() => this.updateTask(item._id)}\n                                        />\n                                        <span style={{ paddingRight: 10 }}>Terminado</span>\n                                        <Icon\n                                            name=\"undo\"\n                                            color=\"yellow\"\n                                            onClick={() => this.undoTask(item._id)}\n                                        />\n                                        <span style={{ paddingRight: 10 }}>Deshacer</span>\n                                        <Icon\n                                            name=\"delete\"\n                                            color=\"red\"\n                                            onClick={() => this.deleteTask(item._id)}\n                                        />\n                                        <span style={{ paddingRight: 10 }}>Eliminar</span>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        );\n                    })\n                });\n            } else {\n                this.setState({\n                    items: []\n                });\n            }\n        });\n    };\n\n    updateTask = id => {\n        axios\n            .put(endpoint + \"/api/task/\" + id, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            })\n            .then(res => {\n                console.log(res);\n                this.getTask();\n            });\n    };\n\n    undoTask = id => {\n        axios\n            .put(endpoint + \"/api/undoTask/\" + id, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            })\n            .then(res => {\n                console.log(res);\n                this.getTask();\n            });\n    };\n\n    deleteTask = id => {\n        axios\n            .delete(endpoint + \"/api/deleteTask/\" + id, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            })\n            .then(res => {\n                console.log(res);\n                this.getTask();\n            });\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <br />\n                    <Header className=\"header\" as=\"h2\">TO-DO Lis</Header>\n                    <br />\n                </div>\n                <div className=\"row\">\n                    <Form onSubmit={this.onSubmit}>\n                        <Input\n                            type=\"text\"\n                            name=\"task\"\n                            onChange={this.onChange}\n                            value={this.state.task}\n                            fluid\n                            placeholder=\"Crear Tarea\"\n                        />\n                        {/* <Button >Crear Tarea</Button> */}\n                    </Form>\n                </div>\n                <div className=\"row\">\n                    <Card.Group>{this.state.items}</Card.Group>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ToDoList;","import React from \"react\";\nimport \"./App.css\";\n\n// import Container Component de semantic-ui-react\nimport { Container } from \"semantic-ui-react\";\n\n// import ToDoList component\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <ToDoList />\n      </Container>\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}